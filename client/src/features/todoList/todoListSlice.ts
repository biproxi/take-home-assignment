import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { deleteTodoItem, fetchTodoList, updateTodoItem, saveNewTodoItem } from './todoListAPI';

export enum TodoStatusEnum {
    Active = 'Active', // the todo has is not completed
    Inactive = 'Inactive', // the todo is completed
    Archived = 'Archived', // the todo is archived (bonus)
}
  
export interface NewTodo {
    title: string;
    status: TodoStatusEnum;
    lastUpdatedAt: number;
    createdAt: number;
}

export interface Todo extends NewTodo {
    id: number;
    networkStatus?: "loading" | "idle"
}

export interface TodoListState {
    todoList: Todo[];
    status: "loading" | "idle";
    displayAddTodoForm: boolean
}

const initialState: TodoListState = {
    todoList: [] as Todo[],
    status: "idle",
    displayAddTodoForm: true,
}


export const loadTodoList = createAsyncThunk(
  'todoList/fetchTodoList',
  async (): Promise<Todo[]> => {
    const response = await fetchTodoList();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const updateTodo = createAsyncThunk(
    'todoList/updateTodoItem',
    async (todo: Todo): Promise<Todo> => {
        const response = await updateTodoItem(todo);
        return response;
    }
)

export const deleteTodo = createAsyncThunk(
    'todoList/deleteTodoItem',
    async (todo: Todo): Promise<Todo> => {
        const response = await deleteTodoItem(todo);
        return response;
    }
)

export const saveTodo = createAsyncThunk(
    'todoList/saveNewTodoItem',
    async (title: string): Promise<Todo> => {
        const response = await saveNewTodoItem(title);
        return response;
    }
)


export const todoListSlice = createSlice({
  name: 'todoList',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    toggleTodoForm: (state) => {
        state.displayAddTodoForm = !state.displayAddTodoForm
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadTodoList.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loadTodoList.fulfilled, (state, action) => {
        state.status = 'idle';
        state.todoList = action.payload;
      })
      .addCase(updateTodo.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateTodo.fulfilled, (state, action) => {
        state.status = 'idle';
        const i = state.todoList.findIndex((elem: Todo) => elem.id === action.payload.id)
        state.todoList[i] = action.payload
      })
      .addCase(deleteTodo.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(deleteTodo.fulfilled, (state, action) => {
        state.status = 'idle';
        const i = state.todoList.findIndex((elem: Todo) => elem.id === action.payload.id)
        delete state.todoList[i]
      })
      .addCase(saveTodo.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(saveTodo.fulfilled, (state, action) => {
        state.status = 'idle';
        state.todoList.push(action.payload)
      });
    },
});

export const { toggleTodoForm } = todoListSlice.actions;


export const selectToDos = (state: RootState) => state.todoList;
export const selectDisplayAddTodoForm = (state: RootState) => state.todoList.displayAddTodoForm;


export default todoListSlice.reducer;
